//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NYP.FLYTA_API {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FLYTA_API.IFLYTA_WS")]
    public interface IFLYTA_WS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/getProgrammes", ReplyAction="http://tempuri.org/IFLYTA_WS/getProgrammesResponse")]
        System.Data.DataSet getProgrammes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/getProgrammes", ReplyAction="http://tempuri.org/IFLYTA_WS/getProgrammesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProgrammesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/getAvailableProgrammes", ReplyAction="http://tempuri.org/IFLYTA_WS/getAvailableProgrammesResponse")]
        System.Data.DataSet getAvailableProgrammes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/getAvailableProgrammes", ReplyAction="http://tempuri.org/IFLYTA_WS/getAvailableProgrammesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAvailableProgrammesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/incrementSeats", ReplyAction="http://tempuri.org/IFLYTA_WS/incrementSeatsResponse")]
        int incrementSeats(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFLYTA_WS/incrementSeats", ReplyAction="http://tempuri.org/IFLYTA_WS/incrementSeatsResponse")]
        System.Threading.Tasks.Task<int> incrementSeatsAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFLYTA_WSChannel : NYP.FLYTA_API.IFLYTA_WS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FLYTA_WSClient : System.ServiceModel.ClientBase<NYP.FLYTA_API.IFLYTA_WS>, NYP.FLYTA_API.IFLYTA_WS {
        
        public FLYTA_WSClient() {
        }
        
        public FLYTA_WSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FLYTA_WSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FLYTA_WSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FLYTA_WSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet getProgrammes() {
            return base.Channel.getProgrammes();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProgrammesAsync() {
            return base.Channel.getProgrammesAsync();
        }
        
        public System.Data.DataSet getAvailableProgrammes() {
            return base.Channel.getAvailableProgrammes();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAvailableProgrammesAsync() {
            return base.Channel.getAvailableProgrammesAsync();
        }
        
        public int incrementSeats(int Id) {
            return base.Channel.incrementSeats(Id);
        }
        
        public System.Threading.Tasks.Task<int> incrementSeatsAsync(int Id) {
            return base.Channel.incrementSeatsAsync(Id);
        }
    }
}
